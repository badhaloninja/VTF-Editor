// module "vtf_info.js"
const VTFImageFormats = {
	'-1': 'NONE',
    0: 'RGBA8888',
    1: 'ABGR8888',
    2: 'RGB888',
    3: 'BGR888',
    4: 'RGB565',
    5: 'I8',
    6: 'IA88',
    7: 'P8',
    8: 'A8',
    9: 'RGB888_BLUESCREEN',
    10: 'BGR888_BLUESCREEN',
    11: 'ARGB8888',
    12: 'BGRA8888',
    13: 'DXT1',
    14: 'DXT3',
    15: 'DXT5',
    16: 'BGRX8888',
    17: 'BGR565',
    18: 'BGRX5551',
    19: 'BGRA4444',
    20: 'DXT1_ONEBITALPHA',
    21: 'BGRA5551',
    22: 'UV88',
    23: 'UVWQ8888',
    24: 'RGBA16161616F',
    25: 'RGBA16161616',
    26: 'UVLX8888',
	NONE:-1,
    RGBA8888:0,
    ABGR8888:1,
    RGB888:2,
    BGR888:3,
    RGB565:4,
    I8:5,
    IA88:6,
    P8:7,
    A8:8,
    RGB888_BLUESCREEN:9,
    BGR888_BLUESCREEN:10,
    ARGB8888:11,
    BGRA8888:12,
    DXT1:13,
    DXT3:14,
    DXT5:15,
    BGRX8888:16,
    BGR565:17,
    BGRX5551:18,
    BGRA4444:19,
    DXT1_ONEBITALPHA:20,
    BGRA5551:21,
    UV88:22,
    UVWQ8888:23,
    RGBA16161616F:24,
    RGBA16161616:25,
    UVLX8888:26
};

const ImageFormatInfo = {
    NONE: {},

    RGBA8888:{
        supported: true,
        total_bits: 32
    },
    ABGR8888:{
        supported: false,
        total_bits: 32
    },
    RGB888:{
        supported: true,
        total_bits: 24
    },
    BGR888:{
        supported: true,
        total_bits: 24
    },
    RGB565:{
        supported: true,
        total_bits: 16
    },
    I8:{
        supported: false,
        total_bits: 8
    },
    IA88:{
        supported: false,
        total_bits: 16
    },
    P8:{
        supported: false,
        total_bits: 8
    },
    A8:{
        supported: false,
        total_bits: 8
    },
    RGB888_BLUESCREEN:{
        supported: false,
        total_bits: 24
    },
    BGR888_BLUESCREEN:{
        supported: false,
        total_bits: 24
    },
    ARGB8888:{
        supported: false,
        total_bits: 32
    },
    BGRA8888:{
        supported: true,
        total_bits: 32
    },
    DXT1:{
        supported: true,
        total_bits: 4
    },
    DXT3:{
        supported: false,
        total_bits: 8
    },
    DXT5:{
        supported: true,
        total_bits: 8
    },
    BGRX8888:{
        supported: false,
        total_bits: 32
    },
    BGR565:{
        supported: false,
        total_bits: 16
    },
    BGRX5551:{
        supported: false,
        total_bits: 16
    },
    BGRA4444:{
        supported: true,
        total_bits: 16
    },
    DXT1_ONEBITALPHA:{
        supported: false,
        total_bits: 4
    },
    BGRA5551:{
        supported: true,
        total_bits: 16
    },
    UV88:{
        supported: false,
        total_bits: 16
    },
    UVWQ8888:{
        supported: false,
        total_bits: 32
    },
    RGBA16161616F:{
        supported: false,
        total_bits: 64
    },
    RGBA16161616:{
        supported: false,
        total_bits: 64
    },
    UVLX8888:{
        supported: false,
        total_bits: 32
    }
};

const TextureFlags = {
    POINTSAMPLE                                :"00000001",
    TRILINEAR                                  :"00000002",
    CLAMPS                                     :"00000004",
    CLAMPT                                     :"00000008",
    ANISOTROPIC                                :"00000010",
    HINT_DXT5                                  :"00000020",
    SRGB                                       :"00000040", // Originally internal to VTex as NOCOMPRESS.
    DEPRECATED_NOCOMPRESS                      :"00000040",
    NORMAL                                     :"00000080",
    NOMIP                                      :"00000100",
    NOLOD                                      :"00000200",
    MINMIP                                     :"00000400",
    PROCEDURAL                                 :"00000800",
    ONEBITALPHA                                :"00001000", //!< Automatically generated by VTex.
    EIGHTBITALPHA                              :"00002000", //!< Automatically generated by VTex.
    ENVMAP                                     :"00004000",
    RENDERTARGET                               :"00008000",
    DEPTHRENDERTARGET                          :"00010000",
    NODEBUGOVERRIDE                            :"00020000",
    SINGLECOPY                                 :"00040000",
    UNUSED0                                    :"00080000", //!< Originally internal to VTex as ONEOVERMIPLEVELINALPHA.
    DEPRECATED_ONEOVERMIPLEVELINALPHA          :"00080000",
    UNUSED1                                    :"00100000", //!< Originally internal to VTex as PREMULTCOLORBYONEOVERMIPLEVEL.
    DEPRECATED_PREMULTCOLORBYONEOVERMIPLEVEL   :"00100000",
    UNUSED2                                    :"00200000", //!< Originally internal to VTex as NORMALTODUDV.
    DEPRECATED_NORMALTODUDV                    :"00200000",
    UNUSED3                                    :"00400000", //!< Originally internal to VTex as ALPHATESTMIPGENERATION.
    DEPRECATED_ALPHATESTMIPGENERATION          :"00400000",
    NODEPTHBUFFER                              :"00800000",
    UNUSED4                                    :"01000000", //!< Originally internal to VTex as NICEFILTERED.
    DEPRECATED_NICEFILTERED                    :"01000000",
    CLAMPU                                     :"02000000",
    VERTEXTEXTURE                              :"04000000",
    SSBUMP                                     :"08000000",
    UNUSED5                                    :"10000000", //!< Originally UNFILTERABLE_OK.
    DEPRECATED_UNFILTERABLE_OK                 :"10000000",
    BORDER                                     :"20000000",
    getflags: function() {
        var tmp="00000000"
        VTFOptions.selectedFlags.forEach(function(entry) {
          tmp = (parseInt(tmp, 16) + parseInt(TextureFlags[entry], 16)).toString(16);
          while (tmp.length < 8) { tmp = '0' + tmp; } // Zero pad.
        });
        return fromHexString(tmp.toString()).reverse().toString();
    }
};

let VTFOptions = {
    version: [7,1],
    width: 2,
    height: 2,
    lumaWeights: [0.213,0.715,0.072],//[0.2126,0.7152,0.0722] ITU-R BT.709
    selectedFlags: ["CLAMPT","ANISOTROPIC","HINT_DXT5","SRGB","NOMIP","NOLOD","EIGHTBITALPHA"],
}
const VTFConst = {
    signature: "00465456",
    headerSize: "64",
    padding: "00000000",
    reflectivity: "3f800000",
    bumpmapScale: "3f800000"

}
function floattest(floatnum) {
    const getHex = i => ('00' + i.toString(16)).slice(-2);

var view = new DataView(new ArrayBuffer(4)),
    result;

view.setFloat32(0, floatnum);

result = Array
    .apply(null, { length: 4 })
    .map((_, i) => getHex(view.getUint8(i)))
    .join('');

console.log(result);
}
//[86,84,70,0,version[0],0,0,0,version[1],0,0,0,64,0,0,0,0,0,0,0,12 + sampling,flags,0,0,1,0,0,0 ,0,0,0,0 ,0,0,128,63 ,0,0,128,63 ,0,0,128,63 ,0,0,0,0 ,0,0,128,63,outputType,0,0,0,1,255,255,255,255,0,0,1];
// signature[4],version[8],size[4],width[2],height[2],flags[4],frames[2],firstframe[2],padding[4],
/*
export const VTFHEADER {
    char        signature[4];        // File signature ("VTF\0"). (or as little-endian integer, 0x00465456)
    unsigned int    version[2];        // version[0].version[1] (currently 7.2).
    unsigned int    headerSize;        // Size of the header struct  (16 byte aligned; currently 80 bytes) + size of the resources dictionary (7.3+).
    unsigned short    width;            // Width of the largest mipmap in pixels. Must be a power of 2.
    unsigned short    height;            // Height of the largest mipmap in pixels. Must be a power of 2.
    unsigned int    flags;            // VTF flags.
    unsigned short    frames;            // Number of frames, if animated (1 for no animation).
    unsigned short    firstFrame;        // First frame in animation (0 based).
    unsigned char    padding0[4];        // reflectivity padding (16 byte alignment).
    float        reflectivity[3];    // reflectivity vector.
    unsigned char    padding1[4];        // reflectivity padding (8 byte packing).
    float        bumpmapScale;        // Bumpmap scale.
    unsigned int    highResImageFormat;    // High resolution image format.
    unsigned char    mipmapCount;        // Number of mipmaps.
    unsigned int    lowResImageFormat;    // Low resolution image format (always DXT1).
    unsigned char    lowResImageWidth;    // Low resolution image width.
    unsigned char    lowResImageHeight;    // Low resolution image height.

    // 7.2+
    unsigned short    depth;            // Depth of the largest mipmap in pixels.
                        // Must be a power of 2. Can be 0 or 1 for a 2D texture (v7.2 only).

    // 7.3+
    unsigned char    padding2[3];        // depth padding (4 byte alignment).
    unsigned int    numResources;        // Number of resources this vtf has
}


function vtfheader(title, href, imageUri, description) {
    this.title = title;
    this.href = href;
    this.imageUri = imageUri;
    this.description = description;
}*/